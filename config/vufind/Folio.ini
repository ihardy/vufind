[API]
base_url = https://localhost:9130
username = diku_admin
password = admin
tenant = diku

[IDs]
; Which FOLIO ID is VuFind using as its internal bibliographic ID?
; Options:
; - instance (FOLIO instance ID -- the default)
; - hrid (FOLIO human-readable ID)
type = instance

; This section controls how we authenticate FOLIO users. There are two possible
; ways of authenticating users: logging them in to Okapi, or looking them up in
; the user module with a CQL query. Depending on how your users are managed, you
; may want to use either of these approaches, or a combination thereof.
;
; If you set okapi_login to true and leave the username_field and password_field
; at their default values, user credentials will be used to do a direct Okapi
; lookup, and then their identifier from Okapi will be used to retrieve full user
; details.
;
; If you set okapi_login to false, the username_field and password_field settings
; will determine the CQL query used to look up the user in the user module. This
; can be especially useful if you use a VuFind authentication that lets you load
; user attributes from your institutional directory into the VuFind database. For
; example, you can use the authentication logic to pre-fill the cat_username and
; cat_password fields with a user's barcode and institutional ID, and then you can
; configure this driver to use those two credentials to look up the user in FOLIO.
; When selecting these criteria, keep in mind that if there is ever a mismatch
; between what is in the database and what is in FOLIO, the user will be prompted
; to provide connection credentials. You should make sure you choose credentials
; that cannot be easily guessed, and you will want to modify the myresearch/
; cataloglogin.phtml template in your theme to properly label the form fields.
;
; If you want to do an Okapi login, but you do not want to use the Okapi username
; as the user's primary login credential, you can set username_field to the
; desired primary value and set okapi_login to true. The code will use the
; username_field value to look up the user's username, and then try to log in to
; Okapi using the retrieved username and the user-provided password.
[User]
; The field to look up the user using the cat_username field from the VuFind
; database.
;
; Supported values:
; - username
; - id
; - externalSystemId
; - barcode
; - personal.lastName
; - personal.email
; - personal.phone
; - personal.mobilePhone
; - personal.dateOfBirth
;
; See https://github.com/folio-org/mod-users/blob/master/ramls/userdata.json
; for more details.
username_field = username
; The field to look up the user using the cat_password field from the VuFind
; database (set to false to skip a secondary identifier in the lookup; you MUST
; set this to false when okapi_login = true). See username_field above for
; supported values.
password_field = false
; If this CQL statement is uncommented, it will be used to look up users in
; Okapi. It may include the following placeholders, which will be replaced
; dynamically with appropriate values:
; %%username%% = The user's cat_username value (CQL-escaped)
; %%password%% = The user's cat_password value (CQL-escaped)
; %%username_field%% = The username_field config setting (above)
; %%password_field%% = The password_field config setting (above)
;cql = '%%username_field%% == "%%username%%" and %%password_field%% == "%%password%%"'

; Should we try to log the user into the Okapi API (true) or just look them
; up in the database using [API] credentials above (false). If set to true,
; username_field must be username, and password_field must be false.
okapi_login = true
; Should we override the Okapi token created using [API] credentials with the
; user's credentials after they log in? (Only valid if okapi_login = true)
use_user_token = false

; This section controls hold behavior; note that you must also ensure that Holds are
; enabled in the [Catalog] section of config.ini in order to take advantage of these
; settings.
[Holds]
; If a colon separated list of item statuses is provided here, only matching items
; will show hold / recall links.  Skip this setting to allow all statuses.
;valid_hold_statuses = Charged:Renewed:Overdue

; borrowable - If a colon-separated list of ids from the ITEM_TYPE table is
; provided, only matching items will be included in holds / recalls. Skip this
; setting to allow holds for all item types.
;borrowable = 1:3

; non_borrowable - If a colon-separated list of ids from the ITEM_TYPE table is
; provided, matching items will be excluded from holds / recalls. Skip this setting
; to allow holds for all item types.
;non_borrowable = 2:4:23:10

; HMACKeys - A list of hold form element names that will be analyzed for consistency
; during hold form processing. Most users should not need to change this setting.
HMACKeys = item_id:holdtype:level

; defaultRequiredDate - A colon-separated list used to set the default "not required
; after" date for holds in the format days:months:years
; e.g. 0:1:0 will set a "not required after" date of 1 month from the current date
defaultRequiredDate = 0:1:0

; extraHoldFields - A colon-separated list used to display extra visible fields in the
; place holds form. Supported values are "comments", "requiredByDate",
; "pickUpLocation" and "requestGroup"
extraHoldFields = comments:requiredByDate:pickUpLocation

; A Pick Up Location Code used to pre-select the pick up location drop down list and
; provide a default option if others are not available. Must be one of the following:
; 1) empty string to indicate that the first location is default (default setting)
; 2) "user-selected" to indicate that the user always has to choose the location
; 3) a value within the Location IDs returned by getPickUpLocations()
defaultPickUpLocation = ""

; By default the pick up location list is sorted alphabetically. This setting can be
; used to manually set the order by entering location IDs as a colon-separated list.
; You can also disable sorting by setting this to false.
;pickUpLocationOrder = 158:155

; The maximum number of holding items to generate request links for. The process of
; checking the API for a valid hold is intensive. Any hold items above this this
; limit will have their hold status checked via ajax or when a user clicks on the
; link. Use "0" to check all items via ajax. Default is 15.
holdCheckLimit = 15

; By default recall is the preferred method. Uncomment this setting to disable
; recalls.
;enableRecalls = false

; By default item holds are enabled. Uncomment this setting to disable item holds.
;enableItemHolds = false

; A request group ID used to pre-select the request group drop down list and
; provide a default option if others are not available. Must be one of the following:
; 1) empty string to indicate that the first group is default (default setting)
; 2) "user-selected" to indicate that the user always has to choose the group
; 3) a value within request group IDs returned by getRequestGroups().
; This setting is only effective if requestGroup is specified in extraHoldFields.
;defaultRequestGroup = ""

; By default the request group list is sorted alphabetically. This setting can be
; used to manually set the order by entering request group IDs as a colon-separated
; list.
; This setting is only effective if requestGroup is specified in extraHoldFields.
;requestGroupOrder = 33

; By default the available pickup locations don't have to belong to the selected
; request group.
; Uncomment this setting to limit pickup locations to the request group.
; This setting is only effective if requestGroup is specified in extraHoldFields.
;pickupLocationsInRequestGroup = true

; By default a title hold can be placed even when there are no items. Uncomment this
; to prevent holds if no items exist. If request groups are enabled, item existence
; is checked only in the selected request group.
;checkItemsExist = true

; By default a title hold can be placed even when there are items available.
; Uncomment this to prevent holds if items are available. If request groups are
; enabled, availability is checked only in the selected request group.
;checkItemsNotAvailable = true

; A colon-separated list of request group ids for which the available item check is
; disabled. If a listed request group is selected, the availability check is not made
; regardless of the setting above.
; This setting is only effective if requestGroup is specified in extraHoldFields.
disableAvailabilityCheckForRequestGroups = "15:19:21:32"

; A colon-separated list of ids from the LOCATION table. If provided, items with a
; matching location are excluded from item availability.
;excludedItemLocations = "2:4:23:10"

; By default a patron can place a hold on records he/she already has on loan.
; This setting can be used to modify this behavior. Must be one of the following:
; 1) false to indicate that loans are not checked (default setting).
; 2) true to indicate that any loan on the bibliographic record prevents further
; holds.
; 3) "same-item" to indicate that a loan on the specific item prevents placing a hold
; on it.
;checkLoans = true

; Optional help texts that can be displayed on the hold form
;helpText = "Help text for all languages."
;helpText[en-gb] = "Help text for English language."

; By default a request can be canceled even if the item is available for pickup.
; Uncomment this to disable canceling of available requests.
;allowCancelingAvailableRequests = false
